/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fges.easyfoodtruck.service.api.controller;

import fges.easyfoodtruck.service.api.model.Error;
import fges.easyfoodtruck.service.api.model.IngredientDTO;
import fges.easyfoodtruck.service.exception.FunctionalException;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "Ingredient", description = "the Ingredient API")
public interface IngredientApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/ingredient/add : create an ingredient
     * create an ingredient
     *
     * @param ingredientDTO  (optional)
     * @return Successful response - returns an Id. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "create an ingredient", nickname = "createIngredient", notes = "create an ingredient", response = Integer.class, tags={ "Ingredient", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an Id.", response = Integer.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/ingredient/add",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Integer> createIngredient(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) IngredientDTO ingredientDTO) throws FunctionalException {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/ingredient/{id}/delete : delete an ingredient
     * delete an ingredient
     *
     * @param id id of the ingredient (required)
     * @return Accepted. (status code 202)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "delete an ingredient", nickname = "deleteIngredientId", notes = "delete an ingredient", tags={ "Ingredient", })
    @ApiResponses(value = {
        @ApiResponse(code = 202, message = "Accepted."),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/ingredient/{id}/delete",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteIngredientId(@ApiParam(value = "id of the ingredient",required=true) @PathVariable("id") Integer id) throws FunctionalException {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/ingredient/all : get all ingredients
     * get all ingredient
     *
     * @return Successful response - returns an array of &#x60;IngredientDTO&#x60; entities. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "get all ingredients", nickname = "getIngredients", notes = "get all ingredient", response = IngredientDTO.class, responseContainer = "List", tags={ "Ingredient", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an array of `IngredientDTO` entities.", response = IngredientDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/ingredient/all",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<IngredientDTO>> getIngredients() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"division\" : 1, \"unit\" : \"g\", \"id_ingredient\" : 0, \"name\" : \"name\", \"description\" : \"description\", \"stock\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/ingredient/update : update an ingredient
     * update an ingredient
     *
     * @param ingredientDTO  (optional)
     * @return Successful response - returns &#x60;IngredientDTO&#x60; entities. (status code 202)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "update an ingredient", nickname = "updateIngredientId", notes = "update an ingredient", response = IngredientDTO.class, tags={ "Ingredient", })
    @ApiResponses(value = {
        @ApiResponse(code = 202, message = "Successful response - returns `IngredientDTO` entities.", response = IngredientDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/ingredient/update",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<IngredientDTO> updateIngredientId(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) IngredientDTO ingredientDTO) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"division\" : 1, \"unit\" : \"g\", \"id_ingredient\" : 0, \"name\" : \"name\", \"description\" : \"description\", \"stock\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
