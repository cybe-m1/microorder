/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fges.easyfoodtruck.service.api.controller;

import fges.easyfoodtruck.service.api.model.Error;
import fges.easyfoodtruck.service.api.model.EstimationDTO;
import fges.easyfoodtruck.service.api.model.ProductEstimationDTO;
import fges.easyfoodtruck.service.exception.FunctionalException;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@Validated
@Api(value = "Estimation", description = "the Estimation API")
public interface EstimationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/estimation/add_menu : add a mnu  in estimation id
     * add a  menu  in estimation id
     *
     * @param id id of the estimation (required)
     * @param menuEstimationDTO  (optional)
     * @return Successful response - returns &#x60;EstimationDTO&#x60; entities. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "add a mnu  in estimation id", nickname = "addMenuestimationId", notes = "add a  menu  in estimation id", response = EstimationDTO.class, tags={ "Estimation", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns `EstimationDTO` entities.", response = EstimationDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/estimation/add_menu",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EstimationDTO> addMenuestimationId(@ApiParam(value = "id of the estimation" ,required=true) @RequestHeader(value="id", required=true) Integer id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) List<MenuEstimationDTO> menuEstimationDTO) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"menusName\" : [ { \"quantity\" : 1, \"name\" : \"name\" }, { \"quantity\" : 1, \"name\" : \"name\" } ], \"id\" : 0, \"productsName\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/estimation/add_product : add a product in estimation id
     * add a product in estimation id
     *
     * @param id id of the estimation (required)
     * @param productEstimationDTO  (optional)
     * @return Successful response - returns &#x60;EstimationDTO&#x60; entities. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "add a product in estimation id", nickname = "addProductEstimationId", notes = "add a product in estimation id", response = EstimationDTO.class, tags={ "Estimation", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns `EstimationDTO` entities.", response = EstimationDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/estimation/add_product",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EstimationDTO> addProductEstimationId(@ApiParam(value = "id of the estimation" ,required=true) @RequestHeader(value="id", required=true) Integer id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) List<ProductEstimationDTO> productEstimationDTO) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"menusName\" : [ { \"quantity\" : 1, \"name\" : \"name\" }, { \"quantity\" : 1, \"name\" : \"name\" } ], \"id\" : 0, \"productsName\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/estimation/add : create an estimation
     * create an estimation
     *
     * @param estimationDTO  (optional)
     * @return Successful response -  returns   &#x60;EstimationDTO&#x60; entities. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "create an estimation", nickname = "createEstimation", notes = "create an estimation", response = EstimationDTO.class, tags={ "Estimation", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response -  returns   `EstimationDTO` entities.", response = EstimationDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/estimation/add",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<EstimationDTO> createEstimation(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) EstimationDTO estimationDTO) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"menusName\" : [ { \"quantity\" : 1, \"name\" : \"name\" }, { \"quantity\" : 1, \"name\" : \"name\" } ], \"id\" : 0, \"productsName\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/estimation/all : get all Estimation
     * get all Estimation
     *
     * @return Successful response - returns an array of &#x60;EstimationDTO&#x60; entities. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "get all Estimation", nickname = "getEstimations", notes = "get all Estimation", response = EstimationDTO.class, responseContainer = "List", tags={ "Estimation", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an array of `EstimationDTO` entities.", response = EstimationDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/estimation/all",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<EstimationDTO>> getEstimations() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"menusName\" : [ { \"quantity\" : 1, \"name\" : \"name\" }, { \"quantity\" : 1, \"name\" : \"name\" } ], \"id\" : 0, \"productsName\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
