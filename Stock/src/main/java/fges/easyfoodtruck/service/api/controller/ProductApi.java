/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fges.easyfoodtruck.service.api.controller;

import fges.easyfoodtruck.service.api.model.Error;
import java.util.List;
import fges.easyfoodtruck.service.api.model.ProductDTO;
import fges.easyfoodtruck.service.api.model.ProductsIngredientDTO;
import fges.easyfoodtruck.service.exception.FunctionalException;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Product", description = "the Product API")
public interface ProductApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/product/add_ingredient : add an ingredient in product id
     * add an ingredient in product id
     *
     * @param id id of the product (required)
     * @param productsIngredientDTO  (optional)
     * @return Successful response - returns an Id. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "add an ingredient in product id", nickname = "addIngredientInProductId", notes = "add an ingredient in product id", response = ProductDTO.class, tags={ "Product", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an Id.", response = ProductDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/product/add_ingredient",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ProductDTO> addIngredientInProductId(@ApiParam(value = "id of the product" ,required=true) @RequestHeader(value="id", required=true) Integer id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) List<ProductsIngredientDTO> productsIngredientDTO) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_product\" : 0, \"ingredient\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ], \"name\" : \"name\", \"description\" : \"description\", \"type\" : \"meal\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /v1/product/add : create a product
     * create a product
     *
     * @param productDTO  (optional)
     * @return Successful response - returns an Id. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "create a product", nickname = "createProduct", notes = "create a product", response = Integer.class, tags={ "Product", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an Id.", response = Integer.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/product/add",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Integer> createProduct(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductDTO productDTO) throws FunctionalException {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/product/all : get all products
     * get all products
     *
     * @return Successful response - returns an array of &#x60;ProductDTO&#x60; entities. (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "get all products", nickname = "getProducts", notes = "get all products", response = ProductDTO.class, responseContainer = "List", tags={ "Product", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successful response - returns an array of `ProductDTO` entities.", response = ProductDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/product/all",
        produces = { "application/json" },
        method = RequestMethod.GET)
    default ResponseEntity<List<ProductDTO>> getProducts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_product\" : 0, \"ingredient\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ], \"name\" : \"name\", \"description\" : \"description\", \"type\" : \"meal\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/product/update : update a product
     * update a product
     *
     * @param productDTO  (optional)
     * @return Successful response - returns &#x60;ProductDTO&#x60; entities. (status code 202)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "update a product", nickname = "updateProductId", notes = "update a product", response = ProductDTO.class, tags={ "Product", })
    @ApiResponses(value = {
        @ApiResponse(code = 202, message = "Successful response - returns `ProductDTO` entities.", response = ProductDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class) })
    @RequestMapping(value = "/v1/product/update",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ProductDTO> updateProductId(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ProductDTO productDTO) throws FunctionalException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id_product\" : 0, \"ingredient\" : [ { \"quantity\" : 6, \"name\" : \"name\" }, { \"quantity\" : 6, \"name\" : \"name\" } ], \"name\" : \"name\", \"description\" : \"description\", \"type\" : \"meal\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
